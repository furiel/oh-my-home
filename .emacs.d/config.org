#+STARTUP: overview

* Font
#+BEGIN_SRC emacs-lisp
  (let* ((favored-fonts '("Source Code Pro" "DejaVu Sans Mono" "Monaco"))
         (favored-font (car (seq-intersection favored-fonts (font-family-list)))))
    (if favored-font
        (set-face-attribute 'default nil :font favored-font)
      (error "No intersection of " favored-fonts (font-family-list))))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 50))
  (add-to-list 'default-frame-alist '(alpha . (90 . 50)))
#+END_SRC

* save settings
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-interval 1000)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-lXGhA --group-directories-first")
#+END_SRC

* osx
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq insert-directory-program "/usr/local/bin/gls" dired-use-ls-dired t)

  (global-unset-key (kbd "s-w"))

  (setq mac-option-key-is-meta nil
        mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-modifier 'super))
#+END_SRC

* ensure
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* whitespaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(electric-indent-mode -1)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* compile window
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

* buffer rendering
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(global-visual-line-mode t)
#+END_SRC

* general key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f6>") '(lambda () (interactive)
  (find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "<f7>") '(lambda () (interactive) (recompile)))
#+END_SRC

* org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (:map org-mode-map
           ("C-'" . nil))
    :config (setq org-src-fontify-natively t))

  (use-package ob-async)

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package ox-reveal
    :config
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t))

  (use-package htmlize)

  (org-babel-do-load-languages
    'org-babel-load-languages '((C . t) (shell . t)))
#+END_SRC

* general completion
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :init
  (ac-config-default)
  (global-auto-complete-mode t))
#+END_SRC

* moving around

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("C-'" . avy-goto-char-timer)
         ("C-:" . avy-goto-line)
         ("M-g w" . avy-goto-word-1)))

(advice-add
 'scroll-up-command :around
 (lambda (orig &rest args)
   "Recentering"
   (apply orig args)
   (recenter)))

(advice-add
 'scroll-down-command :around
 (lambda (orig &rest args)
   "Recentering"
   (apply orig args)
   (recenter)))
#+END_SRC

* paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :bind (:map paredit-mode-map
          ("M-s" . nil)
          ; ("C-<left>" . nil)
          ; ("C-<right>" . nil)
  ))

#+END_SRC
* helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-s g" . helm-grep-do-git-grep))
    :config (helm-mode 1))
#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
    (require 'helm)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-completion-system 'helm)
    (projectile-mode))
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

* helm-gtags
#+BEGIN_SRC emacs-lisp
  (setq helm-gtags-prefix-key "\C-t")
  (setq helm-gtags-suggested-key-mapping t)

  (use-package helm-gtags)

  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (defun run-gtags ()
    (interactive)
    (let* ((path default-directory)
           (default-directory (vc-call-backend (vc-responsible-backend path) 'root path)))
      (shell-command "gtags --gtagslabel=ctag")))

  (advice-add
   'helm-grep-do-git-grep :around
   (lambda (orig &rest args)
     "Reverse sense of prefix arg."
     (helm-gtags-push-stack)
     (let ((arg (car args)))
       (if arg
           (setq args (cons nil (cdr args)))
         (setq args (cons '(4) (cdr args))))
       (apply orig args))))
#+END_SRC
* magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config (setq magit-commit-arguments (list "--signoff")
                transient-default-level 7))
#+END_SRC

* iedit

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind (("C-c ;" . iedit-mode)))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC

* markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
* c
** kernel-mode

#+BEGIN_SRC emacs-lisp
(define-minor-mode linux-kernel-mode
  "Toggle linux-kernel mode." nil
  "linux-kernel" nil
 :group 'linux-kernel
 (progn
   (setq indent-tabs-mode t)
   (c-set-style "linux")))
#+END_SRC

** c-mode

Style can be controlled with c-default-style and c-set-style. Default is gnu.
#+BEGIN_SRC
(add-hook 'c-mode-hook 'helm-gtags-mode)
#+END_SRC

** cmake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC

** bison-mode

#+BEGIN_SRC emacs-lisp
  (use-package bison-mode
    :config (add-to-list 'auto-mode-alist '("\\.ym\\'" . bison-mode)))
#+END_SRC

** lsp
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)

  (setq lsp-idle-delay 0.1)
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC

* go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config (add-hook 'go-mode-hook 'lsp-deferred))

  (setq exec-path (append exec-path (list (expand-file-name "~/gopath/bin/"))))
#+END_SRC

* python

#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))

(use-package virtualenvwrapper
  :ensure t)
#+END_SRC

* clojure
** kondo
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clj-kondo :ensure t)
#+END_SRC

** clojure-mode

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config (require 'flycheck-clj-kondo))
#+END_SRC

** vlaaad
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c s") #'(lambda () (interactive)
  (cider-interactive-eval "(do (require 'vlaaad.reveal) (add-tap (vlaaad.reveal/ui)))")))
(global-set-key (kbd "C-c c r") #'(lambda () (interactive)
  (cider-interactive-eval "(reset)")))
#+END_SRC

** cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :init
    (add-hook 'clojure-mode-hook 'eldoc-mode)
    (add-hook 'clojure-mode-hook 'paredit-mode))
    (add-hook 'cider-mode-hook
              (lambda ()
                (define-key clojure-mode-map (kbd "<C-f12>") 'ciderstart-prepl)))
    (add-hook 'clojure-mode-hook
              (lambda () (put-clojure-indent '>defn :defn)))

  (defun cider-start-prepl ()
    (interactive)
    (cider-interactive-eval "(require '[clojure.core.server :as server])
     (server/start-server {:accept 'clojure.core.server/io-prepl :port 7777 :name \"my prepl\"})"))
#+END_SRC

** lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook ((clojure-mode . lsp)
         (clojurec-mode . lsp)
         (clojurescript-mode . lsp))
  :config
  (dolist (m '(clojure-mode
               clojurec-mode
               clojurescript-mode
               clojurex-mode))
     (add-to-list 'lsp-language-id-configuration `(,m . "clojure"))))
#+END_SRC

* hy
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode
    :bind (:map hy-mode-map
                ("C-x C-e" . 'hy-shell-eval-last-sexp)))
#+END_SRC
* rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config (setq rust-format-on-save t))

  (use-package cargo)

  (setq exec-path (append exec-path (list (expand-file-name "~/.cargo/bin"))))
#+END_SRC
* expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

* phi-search

#+BEGIN_SRC emacs-lisp
  (use-package phi-search)

  (add-hook 'multiple-cursors-mode-enabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-s") 'phi-search)
              (global-set-key (kbd "C-r") 'phi-search-backward)))

  (add-hook 'multiple-cursors-mode-disabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-s") 'isearch-forward)
              (global-set-key (kbd "C-r") 'isearch-backward)))

  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

  (add-hook 'multiple-cursors-mode-enabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-x C-e") 'eval-and-replace)))

  (add-hook 'multiple-cursors-mode-disabled-hook
            (lambda ()
              (interactive)
              (global-set-key (kbd "C-x C-e") 'eval-last-sexp)))
#+END_SRC
* dockerfile-mode

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC

* prompt
#+BEGIN_SRC emacs-lisp
  (defun furiel-prompt--pre-command-hook ()
    (setq furiel-prompt--command-start-time (float-time)))
  (add-hook 'eshell-pre-command-hook 'furiel-prompt--pre-command-hook)

  (defun furiel-prompt--run-git (&rest args)
    (with-temp-buffer
      (apply #'process-file "git"
             nil (list t nil) nil
             args)
      (let ((result (buffer-substring-no-properties
                     (point-min) (line-end-position))))
        (if (string-equal result "")
            nil
          result))))

  (defun furiel-prompt--get-branch-name ()
    (s-chomp
     (or
      (furiel-prompt--run-git "symbolic-ref" "HEAD" "--short")
      (furiel-prompt--run-git "rev-parse" "HEAD" "--short"))))

  (defun furiel-prompt--dirty ()
    (when (furiel-prompt--run-git "status" "--porcelain")
      "🔧"))

  (defun furiel-prompt--git-part ()
    (if-let ((git-branch-name (furiel-prompt--get-branch-name)))
        (progn
          (concat
           (propertize "├─" 'face `(:foreground "green"))
           (propertize (format " branch: %s" git-branch-name) 'face `(:foreground "pink"))
           (if-let ((dirty-list (furiel-prompt--dirty)))
               (propertize (format " %s" (furiel-prompt--dirty)) 'face `(:foreground "pink")))
           "\n"))))

  (defun furiel-prompt--function ()
    (defvar-local furiel-prompt--command-start-time (float-time))

    (let ((execution-time
           (if furiel-prompt--command-start-time
               (- (float-time) furiel-prompt--command-start-time)
             0))
          (git-branch-name (furiel-prompt--get-branch-name)))

      (concat
       (when (> execution-time 0.5)
         (prog1
             (propertize
              (format "\nExecution time: %0.3f\n\n"
                      (- (float-time) furiel-prompt--command-start-time)  'face `(:foreground "white")))
           (setq furiel-prompt--command-start-time nil)))
       (propertize "┌─[" 'face `(:foreground "green"))
       (propertize (user-login-name) 'face `(:foreground "red"))
       (propertize "@" 'face `(:foreground "green"))
       (propertize (system-name) 'face `(:foreground "gray"))
       (propertize "]──[" 'face `(:foreground "green"))
       (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
       (propertize "]──[" 'face `(:foreground "green"))
       (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
       (propertize "]\n" 'face `(:foreground "green"))
       (furiel-prompt--git-part)
       (propertize "└─>" 'face `(:foreground "green"))
       (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green"))
       )))

  (setq eshell-prompt-function #'furiel-prompt--function)
#+END_SRC
* packaging
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (require 'package-x)

  (advice-add
   'package-upload-file :around
   (lambda (orig &rest args)
     "manual copy of multifile package"
     (apply orig args)
     (let ((file (first args)))
       (when (string= (file-name-extension file) "tar")
         (copy-file file package-archive-upload-base)))))
#+END_SRC
* git-link
#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :bind (("C-c g l" . 'git-link))
    :config (setq git-link-use-commit t))
#+END_SRC

* gpg
#+BEGIN_SRC emacs-lisp
  (setenv "SSH_AUTH_SOCK" (string-trim (shell-command-to-string "gpgconf --list-dirs agent-ssh-socket")))
#+END_SRC
